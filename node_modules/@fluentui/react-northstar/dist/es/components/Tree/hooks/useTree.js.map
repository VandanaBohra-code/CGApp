{"version":3,"file":"useTree.js","names":["React","useAutoControlled","flattenTree","useGetItemById","flatTree","callbackRef","useRef","Error","current","itemId","process","env","NODE_ENV","Object","freeze","useCallback","apply","arguments","useStableProps","props","stableProps","useEffect","useTree","options","deprecated_initialActiveItemIds","useMemo","deprecated_getInitialActiveItemIds","items","_useAutoControlled","defaultValue","defaultActiveItemIds","value","activeItemIds","initialValue","setActiveItemIdsState","_useAutoControlled2","defaultSelectedItemIds","selectedItemIds","setSelectedItemIdsState","_React$useMemo","visibleItemIds","getItemById","toggleItemActive","e","idToToggle","item","hasSubtree","nextActiveItemIds","isActiveId","indexOf","_without","concat","exclusive","_getItemById","_getItemById2","_getItemById2$childre","parent","activeSibling","childrenIds","find","id","_invoke","assign","expandSiblings","focusedItemId","focusedItem","parentItem","siblingsIds","_uniq","toggleItemSelect","leafs","getLeafNodes","nextSelectedItemIds","selected","nodes","registerItemRef","node","getItemRef","focusItemById","itemRef","HTMLElement","_getItemById3","focus","_itemRef$firstElement","firstElementChild","searchByFirstChar","startIndex","endIndex","char","i","_getItemRef","_getItemRef$textConte","_getItemRef$textConte2","_getItemRef$textConte3","itemFirstChar","textContent","trim","charAt","toLowerCase","getToFocusIDByFirstCharacter","idToStartSearch","starIndex","length","toFocusIndex","key","result","forEach","expanded","push","rootId","traverseDown","_getItemById4","_getItemById5","child"],"sources":["components/Tree/hooks/useTree.ts"],"sourcesContent":["import * as React from 'react';\nimport { useAutoControlled } from '@fluentui/react-bindings';\nimport { ObjectShorthandCollection } from '../../../types';\nimport { TreeItemProps } from '../TreeItem';\nimport { FlatTreeItem, flattenTree, FlatTree } from './flattenTree';\nimport * as _ from 'lodash';\n\nexport type GetItemById = (id: string) => FlatTreeItem;\n\n/**\n * This hook returns a stable `getItemById()` function that will lookup in latest `flatTree`.\n * This is used to have stable callbacks that can be passed to React's Context.\n */\nfunction useGetItemById(flatTree: FlatTree): GetItemById {\n  // An exception is thrown there to ensure that a proper callback will assigned to ref\n  const callbackRef = React.useRef<GetItemById>(() => {\n    throw new Error('Callback is not assigned yet');\n  });\n\n  // We are assigning a callback during render as it can be used during render and in event handlers. In dev mode we\n  // are freezing objects to prevent their mutations\n  callbackRef.current = itemId =>\n    process.env.NODE_ENV === 'production' ? flatTree[itemId] : Object.freeze(flatTree[itemId]);\n\n  return React.useCallback<GetItemById>((...args) => {\n    return callbackRef.current(...args);\n  }, []);\n}\n\nfunction useStableProps<P>(props: P) {\n  const stableProps = React.useRef<P>(props);\n\n  React.useEffect(() => {\n    stableProps.current = props;\n  });\n\n  return stableProps;\n}\n\nexport interface UseTreeOptions {\n  /** Shorthand array of props for Tree. */\n  items?: ObjectShorthandCollection<TreeItemProps>;\n\n  /** Ids of expanded items. */\n  activeItemIds?: string[];\n  /** Initial activeItemIds value. */\n  defaultActiveItemIds?: string[];\n  /** Only allow one subtree to be expanded at a time. */\n  exclusive?: boolean;\n\n  /** Ids of selected leaf items. */\n  selectedItemIds?: string[];\n  /** Initial selectedItemIds value. */\n  defaultSelectedItemIds?: string[];\n}\n\nexport interface UseTreeResult {\n  /** An object with key being id of each tree item, and value being information of each tree item */\n  flatTree: FlatTree;\n\n  /** Access information of a tree item */\n  getItemById: GetItemById;\n\n  /** Ids of expanded items. */\n  activeItemIds: string[];\n\n  /** Ids of visible items */\n  visibleItemIds: string[];\n\n  /** register ref to a tree item, should be used in callback ref on tree item */\n  registerItemRef: (id: string, node: HTMLElement) => void;\n\n  /** get ref to a tree item by its id */\n  getItemRef: (id: string) => HTMLElement;\n\n  /** update the state of tree when a tree item is expanded/collapsed */\n  toggleItemActive: (e: React.SyntheticEvent, idToToggle: string) => void;\n\n  /** set focus on a tree item by its id. Useful for keyboard navigation */\n  focusItemById: (id: string) => void;\n\n  /** update the state of tree when it is needed to expand all siblings of a tree item, for example on '*' keydown */\n  expandSiblings: (e: React.KeyboardEvent, focusedItemId: string) => void;\n\n  /** update the state of tree when a tree item is selected/unselected */\n  toggleItemSelect: (e: React.SyntheticEvent, idToToggle: string) => void;\n\n  /**\n   * When a-z/A-Z key is pressed on a tree item, move focus to the next visible tree node with content that starts with the typed char.\n   * Search wraps to first matching node if a matching is not found among the nodes that follow the focused node.\n   * Focus stays when no matching is found among all visible nodes.\n   */\n  getToFocusIDByFirstCharacter: (e: React.KeyboardEvent, idToToggle: string) => string;\n}\n\nexport function useTree(options: UseTreeOptions): UseTreeResult {\n  // We need this because we want to handle `expanded` prop on `items`, should be deprecated and removed\n  const deprecated_initialActiveItemIds = React.useMemo(\n    () => deprecated_getInitialActiveItemIds(options.items),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [], // initialValue only needs to be computed on mount\n  );\n\n  const [activeItemIds, setActiveItemIdsState] = useAutoControlled<string[]>({\n    defaultValue: options.defaultActiveItemIds,\n    value: options.activeItemIds,\n    initialValue: deprecated_initialActiveItemIds, // will become []\n  });\n\n  // selectedItemIds is only valid for leaf nodes.\n  // For non-leaf nodes, their 'selected' states are defered from all their descendents\n  const [selectedItemIds, setSelectedItemIdsState] = useAutoControlled<string[]>({\n    defaultValue: options.defaultSelectedItemIds,\n    value: options.selectedItemIds,\n    initialValue: [],\n  });\n\n  // We want to set `visibleItemIds` to simplify rendering later\n  const { flatTree, visibleItemIds } = React.useMemo(\n    () => flattenTree(options.items, activeItemIds, selectedItemIds),\n    [activeItemIds, options.items, selectedItemIds],\n  );\n\n  const getItemById = useGetItemById(flatTree);\n\n  const stableProps = useStableProps(options);\n\n  const toggleItemActive = React.useCallback(\n    (e: React.SyntheticEvent, idToToggle: string) => {\n      const item = getItemById(idToToggle);\n      if (!item || !item.hasSubtree) {\n        // leaf node does not have the concept of active/inactive\n        return;\n      }\n\n      setActiveItemIdsState(activeItemIds => {\n        let nextActiveItemIds: string[];\n        const isActiveId = activeItemIds.indexOf(idToToggle) !== -1;\n\n        if (isActiveId) {\n          nextActiveItemIds = _.without(activeItemIds, idToToggle);\n        } else {\n          nextActiveItemIds = [...activeItemIds, idToToggle];\n\n          if (options.exclusive) {\n            // remove active siblings, if any, from activeItemIds\n            const parent = getItemById(idToToggle)?.parent;\n            const activeSibling = getItemById(parent)?.childrenIds?.find(\n              id => id !== idToToggle && nextActiveItemIds.indexOf(id) >= 0,\n            );\n            if (activeSibling != null) {\n              nextActiveItemIds = _.without(nextActiveItemIds, activeSibling);\n            }\n          }\n        }\n\n        _.invoke(stableProps.current, 'onActiveItemIdsChange', e, {\n          ...stableProps.current,\n          activeItemIds: nextActiveItemIds,\n        });\n\n        return nextActiveItemIds;\n      });\n    },\n    [getItemById, options.exclusive, setActiveItemIdsState, stableProps],\n  );\n\n  const expandSiblings = React.useCallback(\n    (e: React.KeyboardEvent, focusedItemId: string) => {\n      if (options.exclusive) {\n        return;\n      }\n\n      const focusedItem = getItemById(focusedItemId);\n      if (!focusedItem) {\n        return;\n      }\n\n      const parentItem = getItemById(focusedItem?.parent);\n      const siblingsIds = parentItem?.childrenIds;\n\n      if (!siblingsIds) {\n        return;\n      }\n\n      setActiveItemIdsState(activeItemIds => {\n        const nextActiveItemIds = _.uniq(activeItemIds.concat(siblingsIds));\n        _.invoke(stableProps.current, 'onActiveItemIdsChange', e, {\n          ...stableProps.current,\n          activeItemIds: nextActiveItemIds,\n        });\n        return nextActiveItemIds;\n      });\n    },\n    [getItemById, options.exclusive, setActiveItemIdsState, stableProps],\n  );\n\n  const toggleItemSelect = React.useCallback(\n    (e: React.SyntheticEvent, idToToggle: string) => {\n      const item = getItemById(idToToggle);\n      if (!item) {\n        return;\n      }\n      const leafs = getLeafNodes(getItemById, idToToggle);\n\n      setSelectedItemIdsState(selectedItemIds => {\n        const nextSelectedItemIds =\n          item.selected === true\n            ? _.without(selectedItemIds, ...leafs) // remove all leaves from selected\n            : _.uniq(selectedItemIds.concat(leafs)); // add all leaves to selected\n        _.invoke(stableProps.current, 'onSelectedItemIdsChange', e, {\n          ...stableProps.current,\n          selectedItemIds: nextSelectedItemIds,\n        });\n        return nextSelectedItemIds;\n      });\n    },\n    [getItemById, setSelectedItemIdsState, stableProps],\n  );\n\n  // Maintains stable collection of refs to avoid unnecessary React context updates\n  const nodes = React.useRef<Record<string, HTMLElement>>({});\n  const registerItemRef = React.useCallback((id: string, node: HTMLElement) => {\n    nodes.current[id] = node;\n  }, []);\n  const getItemRef = React.useCallback((id): HTMLElement => nodes.current[id], []);\n\n  // can be used for keyboard navigation ===\n  const focusItemById = React.useCallback(\n    (id: string) => {\n      const itemRef = getItemRef(id);\n\n      if (itemRef instanceof HTMLElement) {\n        if (getItemById(id)?.hasSubtree) {\n          itemRef.focus();\n        } else {\n          // when node is leaf, need to focus on the inner treeTitle\n          (itemRef.firstElementChild as HTMLElement)?.focus();\n        }\n      }\n    },\n    [getItemById, getItemRef],\n  );\n\n  const searchByFirstChar = React.useCallback(\n    (startIndex: number, endIndex: number, char: string) => {\n      for (let i = startIndex; i < endIndex; ++i) {\n        // get first charater of tree node using the same way aria does (https://www.w3.org/TR/wai-aria-practices-1.1/examples/treeview/treeview-2/js/treeitemLinks.js)\n        const itemFirstChar = getItemRef(visibleItemIds[i])?.textContent?.trim()?.charAt(0)?.toLowerCase();\n        if (itemFirstChar === char.toLowerCase()) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    [getItemRef, visibleItemIds],\n  );\n\n  const getToFocusIDByFirstCharacter = React.useCallback(\n    (e: React.KeyboardEvent, idToStartSearch: string) => {\n      // Get start index for search\n      let starIndex = visibleItemIds.indexOf(idToStartSearch) + 1;\n      if (starIndex === visibleItemIds.length) {\n        starIndex = 0;\n      }\n\n      // Check following nodes in tree\n      let toFocusIndex = searchByFirstChar(starIndex, visibleItemIds.length, e.key);\n      // If not found in following nodes, check from beginning\n      if (toFocusIndex === -1) {\n        toFocusIndex = searchByFirstChar(0, starIndex - 1, e.key);\n      }\n\n      if (toFocusIndex === -1) {\n        return idToStartSearch;\n      }\n\n      return visibleItemIds[toFocusIndex];\n    },\n    [searchByFirstChar, visibleItemIds],\n  );\n\n  return {\n    flatTree,\n    getItemById,\n    activeItemIds,\n    visibleItemIds,\n    registerItemRef,\n    getItemRef,\n    toggleItemActive,\n    focusItemById,\n    expandSiblings,\n    toggleItemSelect,\n    getToFocusIDByFirstCharacter,\n  };\n}\n\nfunction deprecated_getInitialActiveItemIds(items?: ObjectShorthandCollection<TreeItemProps>) {\n  if (!items) {\n    return [];\n  }\n\n  let result = [];\n  items.forEach(item => {\n    if (item.expanded) {\n      result.push(item.id);\n    }\n\n    if (item.items) {\n      result = result.concat(\n        deprecated_getInitialActiveItemIds(item.items as ObjectShorthandCollection<TreeItemProps>),\n      );\n    }\n  });\n  return result;\n}\n\nfunction getLeafNodes(getItemById: (id: string) => FlatTreeItem, rootId: string) {\n  const leafs = [];\n  const traverseDown = id => {\n    if (getItemById(id)?.childrenIds) {\n      getItemById(id)?.childrenIds.forEach(child => {\n        traverseDown(child);\n      });\n    } else {\n      leafs.push(id);\n    }\n  };\n  traverseDown(rootId);\n  return leafs;\n}\n"],"mappings":"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"}