{"version":3,"file":"fontSizeUtility.js","names":["_isBrowser","require","DEFAULT_REM_SIZE_IN_PX","_documentRemSize","getDocumentRemSize","isBrowser","getFontSizeValue","getComputedStyle","document","documentElement","fontSize","e","exports","size","parseFloat","round","n","pxToRem","valueInPx","baseRemSize","remSize","convertedValueInRems"],"sources":["utils/fontSizeUtility.ts"],"sourcesContent":["import { isBrowser } from './isBrowser';\n\nconst DEFAULT_REM_SIZE_IN_PX = 16;\n\nlet _documentRemSize: number | null = null;\n\nexport const getDocumentRemSize = (): number => {\n  if (isBrowser()) {\n    try {\n      // eslint-disable-next-line no-undef\n      return getFontSizeValue(getComputedStyle(document.documentElement).fontSize) || DEFAULT_REM_SIZE_IN_PX;\n    } catch (e) {\n      return DEFAULT_REM_SIZE_IN_PX;\n    }\n  }\n\n  return DEFAULT_REM_SIZE_IN_PX;\n};\n\nconst getFontSizeValue = (size?: string | null): number | null => {\n  return (size && parseFloat(size)) || null;\n};\n\n// A replacement for a Lodash's one, way more faster on our cases as handles specific scenario\nexport const round = (n: number) => ((n * 10000 + (n > 0 ? 0.5 : -0.5)) << 0) / 10000;\n\n/**\n * Converts the provided px size to rem based on the default font size of 16px unless\n * the HTML font size has been previously defined with setHTMLFontSize().\n * @param valueInPx - The px value to convert to rem.\n * @param baseRemSize - Rem size to use for conversions. Optional - document's font size will be taken otherwise.\n * @example\n * ```\n * // Returns '1rem' for default document font size (16px).\n * pxToRem(16)\n *\n * // Returns '2rem'.\n * pxToRem(32, 16)\n * ```\n * @returns The value converted to the rem.\n */\nexport const pxToRem = (valueInPx: number, baseRemSize?: number): string => {\n  if (!baseRemSize && !_documentRemSize) {\n    // there is no way how to reset the cached value\n    // invalidating the cache is not possible as resetting cached value won't trigger recalculation of site variables,\n    // for which originally computed values will stay unchanged\n    _documentRemSize = getDocumentRemSize();\n  }\n\n  const remSize = baseRemSize || _documentRemSize || DEFAULT_REM_SIZE_IN_PX;\n  const convertedValueInRems = valueInPx / remSize;\n\n  return `${round(convertedValueInRems)}rem`;\n};\n"],"mappings":";;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAEA,IAAMC,sBAAsB,GAAG,EAAE;AAEjC,IAAIC,gBAA+B,GAAG,IAAI;AAEnC,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAiB;EAC9C,IAAI,IAAAC,oBAAS,EAAC,CAAC,EAAE;IACf,IAAI;MACF;MACA,OAAOC,gBAAgB,CAACC,gBAAgB,CAACC,QAAQ,CAACC,eAAe,CAAC,CAACC,QAAQ,CAAC,IAAIR,sBAAsB;IACxG,CAAC,CAAC,OAAOS,CAAC,EAAE;MACV,OAAOT,sBAAsB;IAC/B;EACF;EAEA,OAAOA,sBAAsB;AAC/B,CAAC;AAACU,OAAA,CAAAR,kBAAA,GAAAA,kBAAA;AAEF,IAAME,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIO,IAAoB,EAAoB;EAChE,OAAQA,IAAI,IAAIC,UAAU,CAACD,IAAI,CAAC,IAAK,IAAI;AAC3C,CAAC;;AAED;AACO,IAAME,KAAK,GAAG,SAARA,KAAKA,CAAIC,CAAS;EAAA,OAAK,CAAEA,CAAC,GAAG,KAAK,IAAIA,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,IAAK,CAAC,IAAI,KAAK;AAAA;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdAJ,OAAA,CAAAG,KAAA,GAAAA,KAAA;AAeO,IAAME,OAAO,GAAG,SAAVA,OAAOA,CAAIC,SAAiB,EAAEC,WAAoB,EAAa;EAC1E,IAAI,CAACA,WAAW,IAAI,CAAChB,gBAAgB,EAAE;IACrC;IACA;IACA;IACAA,gBAAgB,GAAGC,kBAAkB,CAAC,CAAC;EACzC;EAEA,IAAMgB,OAAO,GAAGD,WAAW,IAAIhB,gBAAgB,IAAID,sBAAsB;EACzE,IAAMmB,oBAAoB,GAAGH,SAAS,GAAGE,OAAO;EAEhD,OAAUL,KAAK,CAACM,oBAAoB,CAAC;AACvC,CAAC;AAACT,OAAA,CAAAK,OAAA,GAAAA,OAAA"}